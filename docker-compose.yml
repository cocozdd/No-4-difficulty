version: "3.9"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: campus-market-backend:dev
    container_name: campus-backend
    depends_on:
      - mysql
      - redis
      - kafka
      - minio
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/campus_market?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai&characterEncoding=utf8
      SPRING_DATASOURCE_USERNAME: campus_user
      SPRING_DATASOURCE_PASSWORD: campus_pass
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JWT_SECRET: change-me-super-secret-key-please-replace-with-longer-string-123456
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_GOODS: campus-market-goods
      MINIO_BUCKET_CHAT: campus-market-chat
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      start_period: 30s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: campus-market-frontend:dev
    container_name: campus-frontend
    depends_on:
      - backend
    ports:
      - "5173:80"

  mysql:
    image: mysql:8.0.33
    container_name: campus-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: campus_market
      MYSQL_USER: campus_user
      MYSQL_PASSWORD: campus_pass
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
      - ./scripts/db-init:/docker-entrypoint-initdb.d:ro
    ports:
      - "3306:3306"

  redis:
    image: redis:6.2.14
    container_name: campus-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"

  kafka:
    image: bitnami/kafka:3.7
    container_name: campus-kafka
    restart: unless-stopped
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami/kafka

  minio:
    image: minio/minio:RELEASE.2023-04-07T05-28-58Z
    container_name: campus-minio
    restart: unless-stopped
    command: server /data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9090:9090"

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: campus-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-lifecycle"
    ports:
      - "9091:9090"

  grafana:
    image: grafana/grafana:10.4.3
    container_name: campus-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"

volumes:
  mysql-data:
  redis-data:
  kafka-data:
  minio-data:
  grafana-data:
