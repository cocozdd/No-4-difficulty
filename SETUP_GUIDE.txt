Campus Market Mini Stack - Bootstrap Guide
=========================================

1. Prerequisites
----------------
- JDK 11 (Adoptium/AdoptOpenJDK recommended). Check with `java -version`.
- Apache Maven 3.8+ (optional if you prefer the Maven Wrapper later).
- Node.js 16.20.2 (LTS) with npm 8.x (`node -v`, `npm -v`).
- MySQL 8.0.33. Prepare schema and service user:
  ```
  CREATE DATABASE campus_market CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
  CREATE USER 'campus_user'@'%' IDENTIFIED BY 'campus_pass';
  GRANT ALL PRIVILEGES ON campus_market.* TO 'campus_user'@'%';
  FLUSH PRIVILEGES;
  ```
- (Optional) IDE (IntelliJ IDEA / VS Code) plus an API client (Postman, Bruno, etc.).

2. Backend Configuration
------------------------
Path: `backend/`

1. Update `src/main/resources/application.yml` if you changed database credentials.
2. (Optional) Generate Maven Wrapper once: `mvn -N io.takari:maven:wrapper`.
3. Run the service:
   - Dev mode: `mvn spring-boot:run`
   - Jar mode: `mvn clean package && java -jar target/campus-market-0.0.1-SNAPSHOT.jar`
4. Default seeded admin:
   - Username: `admin`
  - Password: `admin123`
5. REST base URL `http://localhost:8080/api`
   - Auth: `/auth/login`, `/auth/register`, `/auth/profile`
   - Goods: `/goods`, `/goods/{id}`, `/goods/mine`
   - Orders: `/orders`

3. Frontend Configuration
-------------------------
Path: `frontend/`

1. Install dependencies: `npm install`
2. Start dev server: `npm run dev` (Vite serves on `http://localhost:5173` and proxies `/api`)
3. Production build: `npm run build`

4. Recommended Workflow
-----------------------
1. Ensure MySQL + `campus_market` schema are online.
2. Start the Spring Boot backend (port 8080).
3. Start the Vite frontend (port 5173).
4. Browse to `http://localhost:5173`.
5. Walk through the training flow:
   - Register / login as a student account.
   - Publish a listing (image optional; a placeholder is generated if omitted).
   - Log in as the admin user to review the pending listing and approve or reject it.
   - Open the detail page and place an order (the backend blocks purchasing your own listing).
   - On the orders page, complete the cooperation flow: buyer pays -> seller ships -> buyer confirms receipt (with a payment simulation dialog).
   - Manage listings in "My Goods"; sold items are tagged and the release form sits alongside the list.

5. Database DDL Bootstrap
-------------------------
Execute once on MySQL 8.0.33:
```
USE campus_market;

CREATE TABLE IF NOT EXISTS user (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(64) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role VARCHAR(32) NOT NULL DEFAULT 'STUDENT',
  nickname VARCHAR(64) NOT NULL,
  avatar_url VARCHAR(255),
  phone VARCHAR(32),
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE IF NOT EXISTS goods (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(128) NOT NULL,
  description TEXT,
  category VARCHAR(64),
  price DECIMAL(10,2) NOT NULL,
  cover_image_url VARCHAR(255),
  seller_id BIGINT NOT NULL,
  published_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  is_sold TINYINT(1) NOT NULL DEFAULT 0,
  is_deleted TINYINT(1) NOT NULL DEFAULT 0,
  status VARCHAR(32) NOT NULL DEFAULT 'PENDING_REVIEW',
  CONSTRAINT fk_goods_seller FOREIGN KEY (seller_id) REFERENCES user(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE IF NOT EXISTS orders (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  goods_id BIGINT NOT NULL,
  buyer_id BIGINT NOT NULL,
  status VARCHAR(32) NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_orders_goods FOREIGN KEY (goods_id) REFERENCES goods(id),
  CONSTRAINT fk_orders_buyer FOREIGN KEY (buyer_id) REFERENCES user(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
```

6. Feature Snapshot
-------------------
- MyBatis-Plus + MySQL persistence replaces the previous in-memory repositories.
- Goods are marked "sold" right after purchase; canceling an order re-lists them and refreshes "My Goods".
- Order progression enforces buyer/seller cooperation: buyer pays, seller confirms shipment, buyer confirms receipt.
- Order list shows both buyer and seller perspectives with product thumbnails and nicknames.
- Frontend placeholder images use DummyImage links to avoid 404s.
- Listings go live only after admin approval; use `/api/goods/pending` and `/api/goods/{id}/review` for moderation.
